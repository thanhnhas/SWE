/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package notepad;

import java.awt.Color;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.io.File;
import java.io.FileReader;
import java.io.PrintWriter;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.event.UndoableEditEvent;
import javax.swing.undo.UndoManager;

/**
 *
 * @author Coder
 */
public class Notepad extends javax.swing.JFrame {
    
    private UndoManager um = new UndoManager();
    private JFileChooser fc = new JFileChooser();
    private String tmp = "";
    private boolean isSave = false;
    private boolean isChange;
    private File f;
    private int posFind;

    /**
     * Creates new form Notepad
     */
    public Notepad() {
        initComponents();
        
        txtContent.setFont(new Font("Arial", 0, 12));
        
        txtContent.getDocument().addUndoableEditListener((UndoableEditEvent e) -> {
            um.addEdit(e.getEdit());
            updateMenu();
        }
        );
        
        this.addWindowListener(new WindowListener() {
            @Override
            public void windowOpened(WindowEvent e) {
                
            }
            
            @Override
            public void windowClosing(WindowEvent e) {
                if (!checkSave(null)) {
                    return;
                }
                
            }
            
            @Override
            public void windowClosed(WindowEvent e) {
                
            }
            
            @Override
            public void windowIconified(WindowEvent e) {
                
            }
            
            @Override
            public void windowDeiconified(WindowEvent e) {
                
            }
            
            @Override
            public void windowActivated(WindowEvent e) {
                
            }
            
            @Override
            public void windowDeactivated(WindowEvent e) {
                
            }
        });
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")

    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        dialogFind = new javax.swing.JDialog();
        txtFind = new javax.swing.JTextField();
        btnFind = new javax.swing.JButton();
        dialogReplace = new javax.swing.JDialog();
        jLabel1 = new javax.swing.JLabel();
        txtFindNext = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtReplace = new javax.swing.JTextField();
        btnFindNext = new javax.swing.JButton();
        btnReplace = new javax.swing.JButton();
        btnReplaceAll = new javax.swing.JButton();
        dialogFont = new javax.swing.JDialog();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        cbFont = new javax.swing.JComboBox<String>();
        cbSize = new javax.swing.JComboBox<String>();
        btnOK = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtShow = new javax.swing.JTextArea();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtContent = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        mnuFile = new javax.swing.JMenu();
        mnuNew = new javax.swing.JMenuItem();
        mnuOpen = new javax.swing.JMenuItem();
        mnuSave = new javax.swing.JMenuItem();
        mnuSaveAS = new javax.swing.JMenuItem();
        mnuExit = new javax.swing.JMenuItem();
        mnuEdit = new javax.swing.JMenu();
        mnuSelectAll = new javax.swing.JMenuItem();
        mnuCut = new javax.swing.JMenuItem();
        mnuCopy = new javax.swing.JMenuItem();
        mnuPaste = new javax.swing.JMenuItem();
        mnuUndo = new javax.swing.JMenuItem();
        mnuRedo = new javax.swing.JMenuItem();
        mnuFind = new javax.swing.JMenuItem();
        mnuReplace = new javax.swing.JMenuItem();
        mnuChangeFont = new javax.swing.JMenuItem();

        dialogFind.getContentPane().setLayout(new java.awt.GridBagLayout());

        txtFind.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFindActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 318;
        gridBagConstraints.ipady = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(12, 10, 11, 0);
        dialogFind.getContentPane().add(txtFind, gridBagConstraints);

        btnFind.setText("Find next");
        btnFind.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFindActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(11, 6, 11, 10);
        dialogFind.getContentPane().add(btnFind, gridBagConstraints);

        jLabel1.setText("Find what");

        jLabel2.setText("Replace with");

        btnFindNext.setText("Find next");
        btnFindNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFindNextActionPerformed(evt);
            }
        });

        btnReplace.setText("Replace");
        btnReplace.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReplaceActionPerformed(evt);
            }
        });

        btnReplaceAll.setText("Replace all");
        btnReplaceAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReplaceAllActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout dialogReplaceLayout = new javax.swing.GroupLayout(dialogReplace.getContentPane());
        dialogReplace.getContentPane().setLayout(dialogReplaceLayout);
        dialogReplaceLayout.setHorizontalGroup(
            dialogReplaceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dialogReplaceLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(dialogReplaceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addGap(30, 30, 30)
                .addGroup(dialogReplaceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtFindNext)
                    .addComponent(txtReplace, javax.swing.GroupLayout.DEFAULT_SIZE, 329, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(dialogReplaceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnReplaceAll, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnReplace, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnFindNext, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        dialogReplaceLayout.setVerticalGroup(
            dialogReplaceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dialogReplaceLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(dialogReplaceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtFindNext, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnFindNext))
                .addGap(18, 18, 18)
                .addGroup(dialogReplaceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtReplace, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnReplace))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnReplaceAll)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel3.setText("Font");

        jLabel4.setText("Size");

        cbFont.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        cbSize.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        btnOK.setText("OK");
        btnOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOKActionPerformed(evt);
            }
        });

        txtShow.setEditable(false);
        txtShow.setColumns(20);
        txtShow.setRows(5);
        txtShow.setText("aAbBcC");
        txtShow.setToolTipText("");
        txtShow.setAutoscrolls(false);
        txtShow.setBorder(null);
        txtShow.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jScrollPane2.setViewportView(txtShow);

        javax.swing.GroupLayout dialogFontLayout = new javax.swing.GroupLayout(dialogFont.getContentPane());
        dialogFont.getContentPane().setLayout(dialogFontLayout);
        dialogFontLayout.setHorizontalGroup(
            dialogFontLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dialogFontLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(dialogFontLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 296, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(dialogFontLayout.createSequentialGroup()
                        .addGroup(dialogFontLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(dialogFontLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(dialogFontLayout.createSequentialGroup()
                                .addComponent(cbSize, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnOK, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(cbFont, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(27, Short.MAX_VALUE))
        );
        dialogFontLayout.setVerticalGroup(
            dialogFontLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dialogFontLayout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addGroup(dialogFontLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(cbFont, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(2, 2, 2)
                .addGroup(dialogFontLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(dialogFontLayout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addComponent(jLabel4))
                    .addGroup(dialogFontLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnOK)
                        .addComponent(cbSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(6, 6, 6)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(97, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        txtContent.setColumns(20);
        txtContent.setRows(5);
        txtContent.addContainerListener(new java.awt.event.ContainerAdapter() {
            public void componentAdded(java.awt.event.ContainerEvent evt) {
                txtContentComponentAdded(evt);
            }
        });
        txtContent.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                txtContentAncestorAdded(evt);
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        txtContent.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                txtContentInputMethodTextChanged(evt);
            }
        });
        jScrollPane1.setViewportView(txtContent);

        mnuFile.setText("File");

        mnuNew.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        mnuNew.setText("New");
        mnuNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuNewActionPerformed(evt);
            }
        });
        mnuFile.add(mnuNew);

        mnuOpen.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        mnuOpen.setText("Open");
        mnuOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuOpenActionPerformed(evt);
            }
        });
        mnuFile.add(mnuOpen);

        mnuSave.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        mnuSave.setText("Save");
        mnuSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuSaveActionPerformed(evt);
            }
        });
        mnuFile.add(mnuSave);

        mnuSaveAS.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        mnuSaveAS.setText("Save as");
        mnuSaveAS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuSaveASActionPerformed(evt);
            }
        });
        mnuFile.add(mnuSaveAS);

        mnuExit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.ALT_MASK));
        mnuExit.setText("Exit");
        mnuExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuExitActionPerformed(evt);
            }
        });
        mnuFile.add(mnuExit);

        jMenuBar1.add(mnuFile);

        mnuEdit.setText("Edit");
        mnuEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuEditActionPerformed(evt);
            }
        });

        mnuSelectAll.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        mnuSelectAll.setText("Select all");
        mnuSelectAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuSelectAllActionPerformed(evt);
            }
        });
        mnuEdit.add(mnuSelectAll);

        mnuCut.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        mnuCut.setText("Cut");
        mnuCut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuCutActionPerformed(evt);
            }
        });
        mnuEdit.add(mnuCut);

        mnuCopy.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        mnuCopy.setText("Copy");
        mnuCopy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuCopyActionPerformed(evt);
            }
        });
        mnuEdit.add(mnuCopy);

        mnuPaste.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_MASK));
        mnuPaste.setText("Paste");
        mnuPaste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuPasteActionPerformed(evt);
            }
        });
        mnuEdit.add(mnuPaste);

        mnuUndo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_U, java.awt.event.InputEvent.CTRL_MASK));
        mnuUndo.setText("Undo");
        mnuUndo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuUndoActionPerformed(evt);
            }
        });
        mnuEdit.add(mnuUndo);

        mnuRedo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Y, java.awt.event.InputEvent.CTRL_MASK));
        mnuRedo.setText("Redo");
        mnuRedo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuRedoActionPerformed(evt);
            }
        });
        mnuEdit.add(mnuRedo);

        mnuFind.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F, java.awt.event.InputEvent.CTRL_MASK));
        mnuFind.setText("Find");
        mnuFind.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuFindActionPerformed(evt);
            }
        });
        mnuEdit.add(mnuFind);

        mnuReplace.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_H, java.awt.event.InputEvent.CTRL_MASK));
        mnuReplace.setText("Replace");
        mnuReplace.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuReplaceActionPerformed(evt);
            }
        });
        mnuEdit.add(mnuReplace);

        mnuChangeFont.setText("Change font");
        mnuChangeFont.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuChangeFontActionPerformed(evt);
            }
        });
        mnuEdit.add(mnuChangeFont);

        jMenuBar1.add(mnuEdit);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 279, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void mnuCutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuCutActionPerformed
        
        txtContent.cut();
        updateMenu();
    }//GEN-LAST:event_mnuCutActionPerformed

    private void mnuCopyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuCopyActionPerformed
        
        txtContent.copy();
        updateMenu();
    }//GEN-LAST:event_mnuCopyActionPerformed

    private void mnuPasteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuPasteActionPerformed
        
        txtContent.paste();
        updateMenu();
    }//GEN-LAST:event_mnuPasteActionPerformed

    private void mnuSelectAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuSelectAllActionPerformed
        
        txtContent.selectAll();
        updateMenu();
    }//GEN-LAST:event_mnuSelectAllActionPerformed

    private void mnuUndoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuUndoActionPerformed
        
        um.undo();
        updateMenu();
    }//GEN-LAST:event_mnuUndoActionPerformed

    private void mnuRedoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuRedoActionPerformed
        
        um.redo();
        updateMenu();
    }//GEN-LAST:event_mnuRedoActionPerformed

    private void mnuExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuExitActionPerformed
        
        if (!checkSave(evt)) {
            return;
        }
        System.exit(0);

    }//GEN-LAST:event_mnuExitActionPerformed

    private void mnuOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuOpenActionPerformed
        
        if (!checkSave(evt)) {
            return;
        }
        int rs = fc.showOpenDialog(this);
        if (rs == JFileChooser.APPROVE_OPTION) {
            f = fc.getSelectedFile();
            try (FileReader fr = new FileReader(f)) {
                txtContent.read(fr, null);
            } catch (Exception e) {
            }
            isSave = true;
            tmp = txtContent.getText();
            
        }

    }//GEN-LAST:event_mnuOpenActionPerformed

    private void mnuNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuNewActionPerformed
        
        if (!checkSave(evt)) {
            return;
        }
        txtContent.setText("");
        isSave = false;
        tmp = txtContent.getText();

    }//GEN-LAST:event_mnuNewActionPerformed

    private void mnuSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuSaveActionPerformed
        
        if (isSave) {
            try (PrintWriter pw = new PrintWriter(f)) {
                txtContent.write(pw);
                isSave = true;
                tmp = txtContent.getText();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, e.getMessage().length() > 1 ? e.getMessage() : "Error Save file!");
            }
        } else {
            mnuSaveASActionPerformed(evt);
        }

    }//GEN-LAST:event_mnuSaveActionPerformed

    private void mnuSaveASActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuSaveASActionPerformed
        
        int rs = fc.showSaveDialog(this);
        if (rs == fc.APPROVE_OPTION) {
            f = fc.getSelectedFile();
            if (f.exists()) {
                int i = JOptionPane.showConfirmDialog(this, "Do you want to replace this file?", "Save", JOptionPane.YES_NO_OPTION);
                if (i == JOptionPane.YES_OPTION) {
                    
                } else {
                    isSave = false;
                    return;
                }
            }
            isSave = true;
            mnuSaveActionPerformed(evt);
        }

    }//GEN-LAST:event_mnuSaveASActionPerformed

    private void txtContentInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_txtContentInputMethodTextChanged

    }//GEN-LAST:event_txtContentInputMethodTextChanged

    private void txtContentComponentAdded(java.awt.event.ContainerEvent evt) {//GEN-FIRST:event_txtContentComponentAdded

    }//GEN-LAST:event_txtContentComponentAdded

    private void txtContentAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_txtContentAncestorAdded
        

    }//GEN-LAST:event_txtContentAncestorAdded

    private void mnuEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuEditActionPerformed

    }//GEN-LAST:event_mnuEditActionPerformed

    private void mnuFindActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuFindActionPerformed
        if (!dialogFind.isActive()) {
            dialogFind.setSize(424, 54);
            dialogFind.setVisible(true);
        } else {
            dialogFind.requestFocus();
        }
        posFind = -1;
    }//GEN-LAST:event_mnuFindActionPerformed

    private void txtFindActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFindActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtFindActionPerformed

    private void btnFindActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFindActionPerformed
        if (txtFind != null && txtFind.getText().length() > 0) {
            String tmpFind = txtFind.getText();
            if (txtContent.getText().contains(tmpFind)) {
                int pos = posFind + txtContent.getText().substring(posFind + 1).indexOf(tmpFind) + 1;
                if (pos == posFind) {
                    posFind = txtContent.getText().indexOf(tmpFind);
                } else {
                    posFind = pos;
                }
                txtContent.setSelectionColor(Color.yellow);
                txtContent.setSelectionStart(posFind);
                txtContent.setSelectionEnd(posFind + tmpFind.length());
                
            } else {
                posFind = -1;
                JOptionPane.showMessageDialog(this, "No word found!");
            }
        }
    }//GEN-LAST:event_btnFindActionPerformed

    private void mnuReplaceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuReplaceActionPerformed
        
        if (!dialogReplace.isActive()) {
            dialogReplace.setSize(572, 172);
            dialogReplace.setVisible(true);
        } else {
            dialogReplace.requestFocus();
        }
        posFind = -1;

    }//GEN-LAST:event_mnuReplaceActionPerformed

    private void btnFindNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFindNextActionPerformed
        if (txtFindNext != null && txtFindNext.getText().length() > 0) {
            String tmpFind = txtFindNext.getText();
            if (txtContent.getText().contains(tmpFind)) {
                int pos = posFind + txtContent.getText().substring(posFind + 1).indexOf(tmpFind) + 1;
                if (pos == posFind) {
                    posFind = txtContent.getText().indexOf(tmpFind);
                } else {
                    posFind = pos;
                }
                txtContent.setSelectionColor(Color.yellow);
                txtContent.setSelectionStart(posFind);
                txtContent.setSelectionEnd(posFind + tmpFind.length());
                
            } else {
                posFind = -1;
                JOptionPane.showMessageDialog(this, "No word found!");
            }
        }
    }//GEN-LAST:event_btnFindNextActionPerformed

    private void btnReplaceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReplaceActionPerformed
        if (!(txtFindNext != null && txtFindNext.getText().length() > 0)) {
            JOptionPane.showMessageDialog(this, "Find what box can't null!");
            return;
        }
        if (txtContent.getSelectedText() == null || txtContent.getSelectedText().length() <= 0) {
            JOptionPane.showMessageDialog(this, "Should be find somthing before replace!");
            return;
        }
        String str = txtContent.getSelectedText();
        txtFindNext.setText(str);
        int start = txtContent.getSelectionStart();
        txtContent.setText(txtContent.getText().substring(0, start) + txtReplace.getText() + txtContent.getText().substring(start + str.length()));
        txtContent.setSelectionStart(start);
        txtContent.setSelectionEnd(start + txtReplace.getText().length());

    }//GEN-LAST:event_btnReplaceActionPerformed

    private void btnReplaceAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReplaceAllActionPerformed
        if (!(txtFindNext != null && txtFindNext.getText().length() > 0)) {
            JOptionPane.showMessageDialog(this, "Find what box can't null!");
            return;
        }
        txtContent.setText(txtContent.getText().replaceAll(txtFindNext.getText(), (txtReplace == null) ? "" : txtReplace.getText()));
    }//GEN-LAST:event_btnReplaceAllActionPerformed

    private void mnuChangeFontActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuChangeFontActionPerformed
        
        if (!dialogFont.isActive()) {
            dialogFont.setSize(344, 196);
            dialogFont.setVisible(true);
            Font font;
            String fonts[] = GraphicsEnvironment.getLocalGraphicsEnvironment().getAvailableFontFamilyNames();
            cbFont.removeAllItems();
            font = txtContent.getFont();
            for (String str : fonts) {
                cbFont.addItem(str);
            }
            cbFont.setSelectedItem(font.getFontName());
            cbSize.removeAllItems();
            for (int i = 10; i <= 36;) {
                cbSize.addItem(String.valueOf(i));
                i = i + 2;
            }
            cbSize.setSelectedItem(String.valueOf(font.getSize()));
            txtShow.setFont(new Font((String) cbFont.getSelectedItem(), 0, Integer.parseInt((String) cbSize.getSelectedItem())));
            cbFont.addItemListener(new ItemListener() {
                @Override
                public void itemStateChanged(ItemEvent e) {
                    txtShow.setFont(new Font((String) cbFont.getSelectedItem(), 0, Integer.parseInt((String) cbSize.getSelectedItem())));
                }
            });
            
            cbSize.addItemListener(new ItemListener() {
                @Override
                public void itemStateChanged(ItemEvent e) {
                    txtShow.setFont(new Font((String) cbFont.getSelectedItem(), 0, Integer.parseInt((String) cbSize.getSelectedItem())));
                }
            });
            
        } else {
            dialogFont.requestFocus();
        }

    }//GEN-LAST:event_mnuChangeFontActionPerformed

    private void btnOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOKActionPerformed
        
        txtContent.setFont(new Font((String) cbFont.getSelectedItem(), 0, Integer.parseInt((String) cbSize.getSelectedItem())));
        dialogFont.setVisible(false);

    }//GEN-LAST:event_btnOKActionPerformed
    
    public boolean checkSave(java.awt.event.ActionEvent evt) {
        if (isChange()) {
            int rs = JOptionPane.showConfirmDialog(this, "Do you want to save?", "Save", JOptionPane.YES_NO_OPTION);
            if (rs == JOptionPane.YES_OPTION) {
                mnuSaveActionPerformed(evt);
                if (!isSave) {
                    return false;
                }
            } else if (rs == JOptionPane.NO_OPTION) {
                return true;
            } else {
                return false;
            }
        }
        return true;
    }
    
    public boolean isChange() {
        return !tmp.equalsIgnoreCase(txtContent.getText());
    }
    
    public void updateMenu() {
        
        mnuUndo.setEnabled(um.canUndo());
        mnuRedo.setEnabled(um.canRedo());
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */


 /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Notepad().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnFind;
    private javax.swing.JButton btnFindNext;
    private javax.swing.JButton btnOK;
    private javax.swing.JButton btnReplace;
    private javax.swing.JButton btnReplaceAll;
    private javax.swing.JComboBox<String> cbFont;
    private javax.swing.JComboBox<String> cbSize;
    private javax.swing.JDialog dialogFind;
    private javax.swing.JDialog dialogFont;
    private javax.swing.JDialog dialogReplace;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JMenuItem mnuChangeFont;
    private javax.swing.JMenuItem mnuCopy;
    private javax.swing.JMenuItem mnuCut;
    private javax.swing.JMenu mnuEdit;
    private javax.swing.JMenuItem mnuExit;
    private javax.swing.JMenu mnuFile;
    private javax.swing.JMenuItem mnuFind;
    private javax.swing.JMenuItem mnuNew;
    private javax.swing.JMenuItem mnuOpen;
    private javax.swing.JMenuItem mnuPaste;
    private javax.swing.JMenuItem mnuRedo;
    private javax.swing.JMenuItem mnuReplace;
    private javax.swing.JMenuItem mnuSave;
    private javax.swing.JMenuItem mnuSaveAS;
    private javax.swing.JMenuItem mnuSelectAll;
    private javax.swing.JMenuItem mnuUndo;
    private javax.swing.JTextArea txtContent;
    private javax.swing.JTextField txtFind;
    private javax.swing.JTextField txtFindNext;
    private javax.swing.JTextField txtReplace;
    private javax.swing.JTextArea txtShow;
    // End of variables declaration//GEN-END:variables
}

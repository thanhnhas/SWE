import java.awt.Font;
import java.awt.event.ActionEvent;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.event.UndoableEditEvent;
import javax.swing.text.Document;
import javax.swing.undo.CannotRedoException;
import javax.swing.undo.CannotUndoException;
import javax.swing.undo.UndoManager;

public class Editor extends javax.swing.JFrame implements FindDialog.FindDialogListener,
        FontChooserDialog.FontChooserDialogListener,
        ReplaceDialog.ReplaceDialogListener {

  private final JFileChooser fc = new JFileChooser();
  private File f;
  private UndoManager m_undo = new UndoManager();
  private int pos = 0;
  private boolean isSave = true;

  public Editor() {
    initComponents();
    isSave = true;

    txtContent.getDocument().addDocumentListener(new DocumentListener() {
      @Override
      public void insertUpdate(DocumentEvent e) {
        isSave = false;
      }

      @Override
      public void removeUpdate(DocumentEvent e) {
        isSave = false;
      }

      @Override
      public void changedUpdate(DocumentEvent e) {
        isSave = false;
      }
    });

    txtContent.getDocument().addUndoableEditListener((UndoableEditEvent e) -> {
      m_undo.addEdit(e.getEdit());
      updateMenu();
    });

    mnuUndo.addActionListener((ActionEvent e) -> {
      try {
        m_undo.undo();
      } catch (CannotUndoException ex) {
      }
      updateMenu();
    });
    mnuRedo.addActionListener((ActionEvent e) -> {
      try {
        m_undo.redo();
      } catch (CannotRedoException ex) {
      }
      updateMenu();
    });
  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
   // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
   private void initComponents() {
      java.awt.GridBagConstraints gridBagConstraints;

      jScrollPane1 = new javax.swing.JScrollPane();
      txtContent = new javax.swing.JTextArea();
      jMenuBar1 = new javax.swing.JMenuBar();
      jMenu1 = new javax.swing.JMenu();
      mnuNew = new javax.swing.JMenuItem();
      mnuOpen = new javax.swing.JMenuItem();
      mnuSave = new javax.swing.JMenuItem();
      mnuSaveAs = new javax.swing.JMenuItem();
      mmuExit = new javax.swing.JMenuItem();
      jMenu2 = new javax.swing.JMenu();
      mnuSelectAll = new javax.swing.JMenuItem();
      mnuCut = new javax.swing.JMenuItem();
      mnuCopy = new javax.swing.JMenuItem();
      mnuPass = new javax.swing.JMenuItem();
      mnuUndo = new javax.swing.JMenuItem();
      mnuRedo = new javax.swing.JMenuItem();
      mnuFind = new javax.swing.JMenuItem();
      mnuReplace = new javax.swing.JMenuItem();
      mnuChangeFont = new javax.swing.JMenuItem();

      setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
      setTitle("Text Editor");
      addWindowListener(new java.awt.event.WindowAdapter() {
         public void windowClosing(java.awt.event.WindowEvent evt) {
            formWindowClosing(evt);
         }
      });
      getContentPane().setLayout(new java.awt.GridBagLayout());

      txtContent.setColumns(20);
      txtContent.setRows(5);
      jScrollPane1.setViewportView(txtContent);

      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 0;
      gridBagConstraints.gridy = 0;
      gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
      gridBagConstraints.ipadx = 377;
      gridBagConstraints.ipady = 256;
      gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
      gridBagConstraints.weightx = 1.0;
      gridBagConstraints.weighty = 1.0;
      getContentPane().add(jScrollPane1, gridBagConstraints);

      jMenu1.setText("File");

      mnuNew.setText("New");
      mnuNew.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            mnuNewActionPerformed(evt);
         }
      });
      jMenu1.add(mnuNew);

      mnuOpen.setText("Open");
      mnuOpen.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            mnuOpenActionPerformed(evt);
         }
      });
      jMenu1.add(mnuOpen);

      mnuSave.setText("Save");
      mnuSave.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            mnuSaveActionPerformed(evt);
         }
      });
      jMenu1.add(mnuSave);

      mnuSaveAs.setText("Save as");
      mnuSaveAs.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            mnuSaveAsActionPerformed(evt);
         }
      });
      jMenu1.add(mnuSaveAs);

      mmuExit.setText("Exit");
      mmuExit.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            mmuExitActionPerformed(evt);
         }
      });
      jMenu1.add(mmuExit);

      jMenuBar1.add(jMenu1);

      jMenu2.setText("Edit");

      mnuSelectAll.setText("Select all");
      mnuSelectAll.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            mnuSelectAllActionPerformed(evt);
         }
      });
      jMenu2.add(mnuSelectAll);

      mnuCut.setText("Cut");
      mnuCut.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            mnuCutActionPerformed(evt);
         }
      });
      jMenu2.add(mnuCut);

      mnuCopy.setText("Copy");
      mnuCopy.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            mnuCopyActionPerformed(evt);
         }
      });
      jMenu2.add(mnuCopy);

      mnuPass.setText("Pass");
      mnuPass.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            mnuPassActionPerformed(evt);
         }
      });
      jMenu2.add(mnuPass);

      mnuUndo.setText("Undo");
      mnuUndo.setEnabled(false);
      jMenu2.add(mnuUndo);

      mnuRedo.setText("Redo");
      mnuRedo.setEnabled(false);
      jMenu2.add(mnuRedo);

      mnuFind.setText("Find");
      mnuFind.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            mnuFindActionPerformed(evt);
         }
      });
      jMenu2.add(mnuFind);

      mnuReplace.setText("Replace");
      mnuReplace.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            mnuReplaceActionPerformed(evt);
         }
      });
      jMenu2.add(mnuReplace);

      mnuChangeFont.setText("Change font");
      mnuChangeFont.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            mnuChangeFontActionPerformed(evt);
         }
      });
      jMenu2.add(mnuChangeFont);

      jMenuBar1.add(jMenu2);

      setJMenuBar(jMenuBar1);

      pack();
   }// </editor-fold>//GEN-END:initComponents

  private void mmuExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mmuExitActionPerformed
    if (!isSave) {
      int option = JOptionPane.showConfirmDialog(rootPane,
              "File is not saved. Want to save?", "Attention!", JOptionPane.YES_NO_OPTION);
      if (option == JOptionPane.YES_OPTION) {
        this.save(); System.exit(0);
      } else {System.exit(0);}
    } else {System.exit(0);}
  }//GEN-LAST:event_mmuExitActionPerformed

  private void mnuOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuOpenActionPerformed
    try {
      int result = fc.showOpenDialog(this);
      if (result == JFileChooser.APPROVE_OPTION) {
        f = fc.getSelectedFile();
        if (f.isFile()) {
          try (FileReader fr = new FileReader(f);
                  BufferedReader bf = new BufferedReader(fr)) {
            this.txtContent.setText("");
            String S, content = "";
            while ((S = bf.readLine()) != null) {
              content += S + "\n";
            }
            txtContent.setText(content);
          }
        } else {
          JOptionPane.showMessageDialog(this, "Folder!",
                  "MESSAGE", JOptionPane.INFORMATION_MESSAGE);
        }
      }
    } catch (IOException e) {
      JOptionPane.showMessageDialog(this, e, "Attention", JOptionPane.ERROR_MESSAGE);
    }
    isSave = true;
  }//GEN-LAST:event_mnuOpenActionPerformed

  private void mnuSaveAsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuSaveAsActionPerformed
    this.saveAs(txtContent.getText());
    isSave = true;
  }//GEN-LAST:event_mnuSaveAsActionPerformed

  private void mnuSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuSaveActionPerformed
    this.save();
    isSave = true;
  }//GEN-LAST:event_mnuSaveActionPerformed

  private void mnuNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuNewActionPerformed
    if (!isSave) {
      int option = JOptionPane.showConfirmDialog(rootPane,
              "File is not saved. Want to save?", "Attention!", JOptionPane.YES_NO_OPTION);
      if (option == JOptionPane.YES_OPTION) {
        this.save();
        isSave = true;
        f = null;
        txtContent.setText("");
      } else {
        f = null;
        txtContent.setText("");
      }
    } else {
      f = null;
      txtContent.setText("");
    }
  }//GEN-LAST:event_mnuNewActionPerformed

  private void mnuSelectAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuSelectAllActionPerformed
    txtContent.selectAll();
  }//GEN-LAST:event_mnuSelectAllActionPerformed

  private void mnuCutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuCutActionPerformed
    txtContent.cut();
  }//GEN-LAST:event_mnuCutActionPerformed

  private void mnuCopyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuCopyActionPerformed
    txtContent.copy();
  }//GEN-LAST:event_mnuCopyActionPerformed

  private void mnuPassActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuPassActionPerformed
    txtContent.paste();
  }//GEN-LAST:event_mnuPassActionPerformed

  private void mnuFindActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuFindActionPerformed
    java.awt.EventQueue.invokeLater(() -> {
      FindDialog dialog = new FindDialog(Editor.this, true);
      dialog.setLocationRelativeTo(rootPane);
      dialog.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
      dialog.setVisible(true);
    });
  }//GEN-LAST:event_mnuFindActionPerformed

  private void mnuChangeFontActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuChangeFontActionPerformed
    // TODO add your handling code here:
    java.awt.EventQueue.invokeLater(() -> {
      FontChooserDialog dialog = new FontChooserDialog(Editor.this, true);
      dialog.setLocationRelativeTo(rootPane);
      dialog.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
      dialog.setVisible(true);
    });
  }//GEN-LAST:event_mnuChangeFontActionPerformed

  private void mnuReplaceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuReplaceActionPerformed
    java.awt.EventQueue.invokeLater(() -> {
      ReplaceDialog dialog = new ReplaceDialog(Editor.this, true);
      dialog.setLocationRelativeTo(rootPane);
      dialog.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
      dialog.setVisible(true);
    });
  }//GEN-LAST:event_mnuReplaceActionPerformed

  private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
    if (!isSave) {
      int option = JOptionPane.showConfirmDialog(rootPane,
              "File is not saved. Want to save?", "Attention!", JOptionPane.YES_NO_OPTION);
      if (option == JOptionPane.YES_OPTION) {
        this.save();
      }
    }
  }//GEN-LAST:event_formWindowClosing

  /**
   * @param args the command line arguments
   */
  public static void main(String args[]) {
    /* Set the Nimbus look and feel */
    //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
    /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
     */
    try {
      for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
        if ("Windows".equals(info.getName())) {
          javax.swing.UIManager.setLookAndFeel(info.getClassName());
          break;
        }
      }
    } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
      java.util.logging.Logger.getLogger(Editor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    }
    //</editor-fold>

    /* Create and display the form */
    java.awt.EventQueue.invokeLater(() -> {
      new Editor().setVisible(true);
    });
  }

   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.JMenu jMenu1;
   private javax.swing.JMenu jMenu2;
   private javax.swing.JMenuBar jMenuBar1;
   private javax.swing.JScrollPane jScrollPane1;
   private javax.swing.JMenuItem mmuExit;
   private javax.swing.JMenuItem mnuChangeFont;
   private javax.swing.JMenuItem mnuCopy;
   private javax.swing.JMenuItem mnuCut;
   private javax.swing.JMenuItem mnuFind;
   private javax.swing.JMenuItem mnuNew;
   private javax.swing.JMenuItem mnuOpen;
   private javax.swing.JMenuItem mnuPass;
   private javax.swing.JMenuItem mnuRedo;
   private javax.swing.JMenuItem mnuReplace;
   private javax.swing.JMenuItem mnuSave;
   private javax.swing.JMenuItem mnuSaveAs;
   private javax.swing.JMenuItem mnuSelectAll;
   private javax.swing.JMenuItem mnuUndo;
   private javax.swing.JTextArea txtContent;
   // End of variables declaration//GEN-END:variables

  private void save() {
    if (f == null) {
      int option = JOptionPane.showConfirmDialog(rootPane,
              "No file opened. Want to create new file?",
              "Yes", JOptionPane.YES_NO_OPTION);
      if (option == JOptionPane.YES_OPTION) {
        this.saveAs(txtContent.getText());
      }
    } else {
      try (PrintWriter pw = new PrintWriter(new FileWriter(f))) {
        pw.write(txtContent.getText());
        pw.close();
      } catch (IOException ex) {
      }
    }
  }

  private void saveAs(String s) {
    int saveFile = fc.showSaveDialog(this);
    if (saveFile == JFileChooser.APPROVE_OPTION) {
      f = fc.getSelectedFile();
      if (f.exists()) {
        int option = JOptionPane.showConfirmDialog(rootPane,
                "File exit. Want to overwrite?",
                "Yes", JOptionPane.YES_NO_OPTION);
        if (option == JOptionPane.YES_OPTION) {
          try (FileWriter fw = new FileWriter(f);
                  BufferedWriter bw = new BufferedWriter(fw)) {
            bw.write(s);
            bw.close();
            fw.close();
          } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, ex,
                    "Attention", JOptionPane.ERROR_MESSAGE);
          }
        }
      } else {
        try (FileWriter fw = new FileWriter(f);
                BufferedWriter bw = new BufferedWriter(fw)) {
          bw.write(s);
          bw.close();
          fw.close();
        } catch (IOException ex) {
          JOptionPane.showMessageDialog(this, ex,
                  "Attention", JOptionPane.ERROR_MESSAGE);
        }
      }
    }
  }

  private void updateMenu() {
    mnuUndo.setEnabled(m_undo.canUndo());
    mnuRedo.setEnabled(m_undo.canRedo());
  }

  @Override
  public void findWord(String s) {
    if (s != null && s.length() > 0) {
      Document document = txtContent.getDocument();
      int keySize = s.length();
      try {
        boolean found = false;
        if (pos + keySize > document.getLength()) {
          pos = 0;
        }
        while (pos + keySize <= document.getLength()) {
          String match = document.getText(pos, keySize).toLowerCase();
          if (match.equals(s)) {
            found = true;
            break;
          }
          pos++;
        }
        if (found) {
          txtContent.setSelectionStart(pos);
          txtContent.setSelectionEnd(pos + s.length());
//          Rectangle viewRect = txtContent.modelToView(pos);
//          txtContent.scrollRectToVisible(viewRect);
//          txtContent.setCaretPosition(pos + keySize);
//          txtContent.moveCaretPosition(pos);
          pos += keySize;
        }
      } catch (Exception exp) {
      }
    }
  }

  @Override
  public Font getFont() {
    return txtContent.getFont();
  }

  @Override
  public void changeFont(Font f) {
    txtContent.setFont(f);
  }

  @Override
  public void replaceWord(String s1, String s2, String s3) {
    switch (s1) {
      case "a":
        this.findWord(s2);
        break;
      case "b":
        txtContent.replaceRange(s3, pos - 1, pos + s2.length() - 1);
        break;
    }
  }
}
